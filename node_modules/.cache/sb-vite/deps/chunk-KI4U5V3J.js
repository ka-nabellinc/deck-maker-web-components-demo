import {
  _$LH,
  render
} from "./chunk-FYNP5T6K.js";
import {
  require_preview_api
} from "./chunk-76P27JAH.js";
import {
  require_global
} from "./chunk-K6L44BO6.js";
import {
  dedent
} from "./chunk-J6CEENEN.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@storybook/web-components/dist/chunk-FJPRWHXQ.mjs
var import_global = __toESM(require_global(), 1);

// node_modules/lit-html/development/directive-helpers.js
var { _ChildPart: ChildPart } = _$LH;
var ENABLE_SHADYDOM_NOPATCH = true;
var _a, _b;
var wrap = ENABLE_SHADYDOM_NOPATCH && ((_a = window.ShadyDOM) == null ? void 0 : _a.inUse) && ((_b = window.ShadyDOM) == null ? void 0 : _b.noPatch) === true ? window.ShadyDOM.wrap : (node) => node;
var isTemplateResult = (value, type) => type === void 0 ? (
  // This property needs to remain unminified.
  (value == null ? void 0 : value["_$litType$"]) !== void 0
) : (value == null ? void 0 : value["_$litType$"]) === type;

// node_modules/@storybook/web-components/dist/chunk-FJPRWHXQ.mjs
var import_preview_api = __toESM(require_preview_api(), 1);
var { Node } = import_global.global;
var render2 = (args, context) => {
  let { id, component } = context;
  if (!component)
    throw new Error(`Unable to render story ${id} as the component annotation is missing from the default export`);
  let element = document.createElement(component);
  return Object.entries(args).forEach(([key, val]) => {
    element[key] = val;
  }), element;
};
function renderToCanvas({ storyFn, kind, name, showMain, showError, forceRemount }, canvasElement) {
  let element = storyFn();
  if (showMain(), isTemplateResult(element)) {
    (forceRemount || !canvasElement.querySelector('[id="root-inner"]')) && (canvasElement.innerHTML = '<div id="root-inner"></div>');
    let renderTo = canvasElement.querySelector('[id="root-inner"]');
    render(element, renderTo), (0, import_preview_api.simulatePageLoad)(canvasElement);
  } else if (typeof element == "string")
    canvasElement.innerHTML = element, (0, import_preview_api.simulatePageLoad)(canvasElement);
  else if (element instanceof Node) {
    if (canvasElement.firstChild === element && !forceRemount)
      return;
    canvasElement.innerHTML = "", canvasElement.appendChild(element), (0, import_preview_api.simulateDOMContentLoaded)();
  } else
    showError({ title: `Expecting an HTML snippet or DOM node from the story: "${name}" of "${kind}".`, description: dedent`
        Did you forget to return the HTML snippet from the story?
        Use "() => <your snippet or node>" or when defining the story.
      ` });
}

export {
  render2 as render,
  renderToCanvas
};
/*! Bundled license information:

lit-html/development/directive-helpers.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=chunk-KI4U5V3J.js.map
